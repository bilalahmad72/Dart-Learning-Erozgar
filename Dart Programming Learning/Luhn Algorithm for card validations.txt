The Luhn algorithm, also known as the "modulus 10" or "mod 10" algorithm, is a simple checksum formula used to validate a variety of identification numbers, most notably credit card numbers. The algorithm was created by IBM scientist Hans Peter Luhn and is used to protect against accidental errors, such as a mistyped digit, but not against intentional fraud.

Here's a step-by-step breakdown of the Luhn algorithm:

1) Starting from the right, double every second digit. 

If the result of this doubling operation is greater than 9 (e.g., 8 × 2 = 16), then add the digits of the product (e.g., 16: 1 + 6 = 7, or alternatively subtract 9 from the product).

2) Take the sum of all the digits.

3) If the total modulo 10 is equal to 0 (if the total ends in zero) 

then the number is valid according to the Luhn formula; otherwise, it is not valid.

Let's see an example with a sample credit card number: 12345678903555

1) Double every second digit, starting from the right: [1, 4, 3, 8, 5, 12, 9, 0, 3, 10, 5, 10, 5, 10]

2) Sum all the digits (for digits greater than 9, add their digits or subtract 9): 
1 + 4 + 3 + 8 + 5 + 3 + 9 + 0 + 3 + 1 + 5 + 1 + 5 + 1 = 49

3) Check if the sum is a multiple of 10: 49 % 10 ≠ 0


Since the sum is not a multiple of 10, the number 12345678903555 is not valid according to the Luhn algorithm.


Example in dart:


bool validateNumberWithLuhn(String number) {
  int sum = 0;
  bool alternate = false;

  for (int i = number.length - 1; i >= 0; i--) {
    int digit = int.parse(number[i]);

    if (alternate) {
      digit *= 2;
      if (digit > 9) {
        digit -= 9;
      }
    }

    sum += digit;
    alternate = !alternate;
  }

  return sum % 10 == 0;
}

void main() {
  String cardNumber = "12345678903555";
  bool isValid = validateNumberWithLuhn(cardNumber);
  print(isValid); // Output: false
}
